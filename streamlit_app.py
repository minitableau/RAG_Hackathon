import streamlit as st
import random
import time
import os
from speech import create_wav
from gguf import model_gguf
from PIL import Image

st.set_page_config(
    page_title="event AI",
    page_icon="ðŸ“…",
)


# Streamed response emulator
def response_generator(txt):
    for word in txt.split():
        yield word + " "
        time.sleep(0.05)


# vide le dossier vocal
dossier = "vocal"
if os.path.exists(dossier) and os.path.isdir(dossier):
    print('ok')
    # # RÃ©cupÃ©rer la liste des fichiers et dossiers dans le dossier
    # fichiers = os.listdir(dossier)
    # # Parcourir tous les fichiers et dossiers dans le dossier
    # for fichier in fichiers:
    #     chemin_complet = os.path.join(dossier, fichier)
    #     # VÃ©rifier si l'Ã©lÃ©ment est un fichier
    #     if os.path.isfile(chemin_complet):
    #         # Supprimer le fichier
    #         os.remove(chemin_complet)
    #     # VÃ©rifier si l'Ã©lÃ©ment est un dossier
    #     elif os.path.isdir(chemin_complet):
    #         # Appeler rÃ©cursivement la fonction pour vider le sous-dossier
    #         vider_dossier(chemin_complet)

col1, col2 = st.columns([1, 4])
image = Image.open('logoapp.png')

with col1:
    st.image(image, use_column_width=True)

with col2:
    st.title("event AI")

# Initialize chat history
if "messages" not in st.session_state:
    st.session_state.messages = []

if "audio" not in st.session_state:
    st.session_state.audio = []

if "reponses" not in st.session_state:
    st.session_state.reponses = []

# Display chat messages from history on app rerun
for message, audio, reponse in zip(st.session_state.messages, st.session_state.audio, st.session_state.reponses):
    # question
    with st.chat_message(message["role"]):
        st.markdown(message["content"])
    # reponse
    with st.chat_message(reponse["role"]):
        st.markdown(reponse["content"])

    st.audio(audio["content"], format="audio/wav")

# Accept user input
if prompt := st.chat_input("Une question sur un Ã©vÃ¨nement ?"):
    # Add user message to chat history
    st.session_state.messages.append({"role": "user", "content": prompt})
    # Display user message in chat message container
    with st.chat_message("user"):
        st.markdown(prompt)

    # Display assistant response in chat message container
    with st.chat_message("assistant"):
        txt = model_gguf(prompt)
        response = st.write_stream(response_generator(txt))
    txt_for_speech = txt
    if (len(txt) >= 600):
        txt_for_speech = txt[:600]
    file_name = os.path.join("vocal", create_wav(txt_for_speech))
    st.audio(file_name, format="audio/wav")
    st.markdown("This answer was generated by Event AI, for more information consult :")
    st.page_link("https://sortir.issy.com/agenda/?oaq%5Bpassed%5D=1&oaq%5Border%5D=latest", label="Our diary", icon="ðŸ“…")

    # Add assistant response to chat history

    st.session_state.reponses.append({"role": "assistant", "content": txt})
    st.session_state.audio.append({"content": file_name})
